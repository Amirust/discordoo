{
	"id": 0,
	"name": "discordoo",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 1,
			"name": "cache",
			"kind": 1,
			"kindString": "Module",
			"flags": {}
		},
		{
			"id": 2,
			"name": "collection",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 3,
					"name": "Collection",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "An utility data structure used within the library"
					},
					"children": [
						{
							"id": 4,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 5,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 6,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 7,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 8,
											"name": "entries",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "array",
															"elementType": {
																"type": "typeOperator",
																"operator": "readonly",
																"target": {
																	"type": "tuple",
																	"elements": [
																		{
																			"type": "reference",
																			"name": "K"
																		},
																		{
																			"type": "reference",
																			"name": "V"
																		}
																	]
																}
															}
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3,
										"typeArguments": [
											{
												"type": "reference",
												"name": "K"
											},
											{
												"type": "reference",
												"name": "V"
											}
										],
										"name": "Collection"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Map<K, V>.constructor"
									}
								},
								{
									"id": 9,
									"name": "new Collection",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 10,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										},
										{
											"id": 11,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 12,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeOperator",
														"operator": "readonly",
														"target": {
															"type": "tuple",
															"elements": [
																{
																	"type": "reference",
																	"name": "K"
																},
																{
																	"type": "reference",
																	"name": "V"
																}
															]
														}
													}
												],
												"name": "Iterable"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3,
										"typeArguments": [
											{
												"type": "reference",
												"name": "K"
											},
											{
												"type": "reference",
												"name": "V"
											}
										],
										"name": "Collection"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Map<K, V>.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "Map<K, V>.constructor"
							}
						},
						{
							"id": 24,
							"name": "clone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/collection/index.ts",
									"line": 37,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 25,
									"name": "clone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new collection based on this one"
									},
									"type": {
										"type": "reference",
										"id": 3,
										"typeArguments": [
											{
												"type": "reference",
												"name": "K"
											},
											{
												"type": "reference",
												"name": "V"
											}
										],
										"name": "Collection"
									}
								}
							]
						},
						{
							"id": 26,
							"name": "equal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/collection/index.ts",
									"line": 45,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 27,
									"name": "equal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Check if two collections are equal"
									},
									"parameters": [
										{
											"id": 28,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "collection to compare to\n"
											},
											"type": {
												"type": "reference",
												"id": 3,
												"typeArguments": [
													{
														"type": "reference",
														"name": "K"
													},
													{
														"type": "reference",
														"name": "V"
													}
												],
												"name": "Collection"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 16,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/collection/index.ts",
									"line": 30,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 17,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filter out the elements which don't meet requirements"
									},
									"parameters": [
										{
											"id": 18,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "function which filters\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 19,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 20,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 21,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "V"
																	}
																},
																{
																	"id": 22,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "K"
																	}
																},
																{
																	"id": 23,
																	"name": "collection",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 3,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "K"
																			},
																			{
																				"type": "reference",
																				"name": "V"
																			}
																		],
																		"name": "Collection"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 3,
										"typeArguments": [
											{
												"type": "reference",
												"name": "K"
											},
											{
												"type": "reference",
												"name": "V"
											}
										],
										"name": "Collection"
									}
								}
							]
						},
						{
							"id": 13,
							"name": "random",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/collection/index.ts",
									"line": 9,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 14,
									"name": "random",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a random element from collection"
									},
									"parameters": [
										{
											"id": 15,
											"name": "amount",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "amount of elements to be retrieved\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "V"
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "V"
												}
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								4
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								24,
								26,
								16,
								13
							]
						}
					],
					"sources": [
						{
							"fileName": "src/collection/index.ts",
							"line": 4,
							"character": 23
						}
					],
					"typeParameter": [
						{
							"id": 29,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						},
						{
							"id": 30,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"name": "K"
								},
								{
									"type": "reference",
									"name": "V"
								}
							],
							"name": "Map"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3
					]
				}
			],
			"sources": [
				{
					"fileName": "src/collection/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 31,
			"name": "core",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 42,
					"name": "Client",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Entry point for all of Discordoo. Manages modules and events"
					},
					"children": [
						{
							"id": 43,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 44,
									"name": "new Client",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 45,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 42,
										"name": "default"
									},
									"overwrites": {
										"type": "reference",
										"name": "TypedEmitter<ClientEventHandlers>.constructor"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "TypedEmitter<ClientEventHandlers>.constructor"
							}
						},
						{
							"id": 47,
							"name": "modules",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Module manager of this client"
							},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 18,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 78,
								"name": "default"
							},
							"defaultValue": "..."
						},
						{
							"id": 48,
							"name": "rest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "RESTProvider used by this module"
							},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 21,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 128,
										"name": "RESTProvider"
									}
								]
							},
							"defaultValue": "null"
						},
						{
							"id": 46,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Token used by this client"
							},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 10,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 49,
							"name": "m",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 27,
									"character": 3
								}
							],
							"signatures": [
								{
									"id": 50,
									"name": "m",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a module. Alias for module(id)."
									},
									"parameters": [
										{
											"id": 51,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "module id\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 68,
												"name": "default"
											}
										]
									}
								}
							]
						},
						{
							"id": 52,
							"name": "module",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 35,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 53,
									"name": "module",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get a module"
									},
									"parameters": [
										{
											"id": 54,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "module id\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"id": 68,
												"name": "default"
											}
										]
									}
								}
							]
						},
						{
							"id": 55,
							"name": "use",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 43,
									"character": 5
								}
							],
							"signatures": [
								{
									"id": 56,
									"name": "use",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a new module load group"
									},
									"parameters": [
										{
											"id": 57,
											"name": "modules",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "modules in the group\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 68,
													"name": "default"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 58,
							"name": "useRESTProvider",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/Client.ts",
									"line": 52,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 59,
									"name": "useRESTProvider",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Set the {@link RESTProvider} to be used by this client\nBounds it's context to {@link Client}"
									},
									"parameters": [
										{
											"id": 60,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "function, that returns desired RESTProvider\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 61,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 62,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 63,
																	"name": "client",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 42,
																		"name": "default"
																	}
																}
															],
															"type": {
																"type": "reference",
																"id": 128,
																"name": "RESTProvider"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								43
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								47,
								48,
								46
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								49,
								52,
								55,
								58
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/Client.ts",
							"line": 8,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"typeArguments": [
								{
									"type": "reference",
									"id": 64,
									"name": "ClientEventHandlers"
								}
							],
							"name": "TypedEmitter"
						}
					]
				},
				{
					"id": 131,
					"name": "Constants",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 133,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 134,
									"name": "new Constants",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 131,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 132,
							"name": "API_ENDPOINT",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true
							},
							"sources": [
								{
									"fileName": "src/core/Constants.ts",
									"line": 2,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "'https://discord.com/api'"
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								133
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								132
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/Constants.ts",
							"line": 1,
							"character": 30
						}
					]
				},
				{
					"id": 78,
					"name": "ModuleManager",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Module manager for Client\nManages module loadment and their \"injection\""
					},
					"children": [
						{
							"id": 79,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 80,
									"name": "new ModuleManager",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 81,
											"name": "client",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "client, into which modules will be loaded\n"
											},
											"type": {
												"type": "reference",
												"id": 42,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 78,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 83,
							"name": "_moduleLoadGroups",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Array of load groups"
							},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 16,
									"character": 27
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"id": 68,
										"name": "default"
									}
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 84,
							"name": "client",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Client which uses this manager"
							},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 42,
								"name": "default"
							}
						},
						{
							"id": 82,
							"name": "modules",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Modules loaded by this manager"
							},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 13,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 3,
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									},
									{
										"type": "reference",
										"id": 68,
										"name": "default"
									}
								],
								"name": "Collection"
							},
							"defaultValue": "..."
						},
						{
							"id": 85,
							"name": "createLoadGroup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 36,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 86,
									"name": "createLoadGroup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a new load group",
										"text": "Load group is a bunch of modules, which will be loaded together sequentially.\nGroups can be either loaded in parallel or sequentially\n"
									},
									"parameters": [
										{
											"id": 87,
											"name": "modules",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "modules to add to a new load group\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 68,
													"name": "default"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 94,
							"name": "getModule",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 78,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 95,
									"name": "getModule",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieve a module"
									},
									"parameters": [
										{
											"id": 96,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "module's id\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"id": 68,
												"name": "default"
											}
										]
									}
								}
							]
						},
						{
							"id": 91,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 52,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 92,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initialize all modules"
									},
									"parameters": [
										{
											"id": 93,
											"name": "async",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "determines if load groups shall be loaded in parallel\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "false"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 88,
							"name": "use",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/modules/ModuleManager.ts",
									"line": 44,
									"character": 5
								}
							],
							"signatures": [
								{
									"id": 89,
									"name": "use",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "An alias to ModuleManager#createLoadGroup"
									},
									"parameters": [
										{
											"id": 90,
											"name": "modules",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "modules to add to a new load group\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 68,
													"name": "default"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								79
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								83,
								84,
								82
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								85,
								94,
								91,
								88
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/modules/ModuleManager.ts",
							"line": 9,
							"character": 34
						}
					]
				},
				{
					"id": 64,
					"name": "ClientEventHandlers",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Client events"
					},
					"children": [
						{
							"id": 65,
							"name": "ready",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Emitted once the client is ready"
							},
							"sources": [
								{
									"fileName": "src/core/ClientEventHandlers.ts",
									"line": 4,
									"character": 7
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 66,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 67,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								65
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/ClientEventHandlers.ts",
							"line": 2,
							"character": 44
						}
					]
				},
				{
					"id": 68,
					"name": "Module",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Represents a module"
					},
					"children": [
						{
							"id": 74,
							"name": "destroyed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Function, which will be emitted once module is destroyed"
							},
							"sources": [
								{
									"fileName": "src/core/modules/Module.ts",
									"line": 13,
									"character": 11
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 75,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 76,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "void"
															}
														],
														"name": "Promise"
													}
												]
											}
										}
									]
								}
							}
						},
						{
							"id": 77,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique id for this module"
							},
							"sources": [
								{
									"fileName": "src/core/modules/Module.ts",
									"line": 15,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "symbol"
									}
								]
							}
						},
						{
							"id": 70,
							"name": "init",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Function, which will be emitted once module was initialized on client's startup",
								"tags": [
									{
										"tag": "param",
										"text": "client, the module will be bound to\n",
										"param": "client"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/modules/Module.ts",
									"line": 11,
									"character": 6
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 71,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 72,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 73,
													"name": "client",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 42,
														"name": "default"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "void"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "void"
															}
														],
														"name": "Promise"
													}
												]
											}
										}
									]
								}
							}
						},
						{
							"id": 69,
							"name": "initialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the module was initialized"
							},
							"sources": [
								{
									"fileName": "src/core/modules/Module.ts",
									"line": 6,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								74,
								77,
								70,
								69
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/modules/Module.ts",
							"line": 4,
							"character": 31
						}
					]
				},
				{
					"id": 135,
					"name": "RESTResponse",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Data fetched from REST"
					},
					"children": [
						{
							"id": 136,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Body"
							},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RESTResponse.ts",
									"line": 7,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "T"
							}
						},
						{
							"id": 138,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Headers"
							},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RESTResponse.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 137,
							"name": "statusCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Status code"
							},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RESTResponse.ts",
									"line": 9,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								136,
								138,
								137
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/providers/rest/RESTResponse.ts",
							"line": 5,
							"character": 37
						}
					],
					"typeParameter": [
						{
							"id": 139,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "body type\n"
							}
						}
					]
				},
				{
					"id": 97,
					"name": "RequestBuilder",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Represents a request builder"
					},
					"children": [
						{
							"id": 113,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 114,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create DELETE request"
									},
									"typeParameter": [
										{
											"id": 115,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 116,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 105,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 106,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create GET request"
									},
									"typeParameter": [
										{
											"id": 107,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 108,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 121,
							"name": "patch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 122,
									"name": "patch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create PATCH request"
									},
									"typeParameter": [
										{
											"id": 123,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 124,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 109,
							"name": "post",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 110,
									"name": "post",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create POST request"
									},
									"typeParameter": [
										{
											"id": 111,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 112,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 117,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 118,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create PUT request"
									},
									"typeParameter": [
										{
											"id": 119,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 120,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 101,
							"name": "query",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 102,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add query data"
									},
									"parameters": [
										{
											"id": 103,
											"name": "k",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "key"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 104,
											"name": "v",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "value\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 97,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 98,
							"name": "url",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 99,
									"name": "url",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add part(s) to the URI"
									},
									"parameters": [
										{
											"id": 100,
											"name": "paths",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "paths\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 97,
										"name": "default"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								113,
								105,
								121,
								109,
								117,
								101,
								98
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/providers/rest/RequestBuilder.ts",
							"line": 5,
							"character": 39
						}
					],
					"implementedBy": [
						{
							"type": "reference",
							"id": 154,
							"name": "RESTRequestBuilder"
						}
					]
				},
				{
					"id": 125,
					"name": "RequestOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Request options"
					},
					"children": [
						{
							"id": 127,
							"name": "body",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Body"
							},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RequestOptions.ts",
									"line": 6,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						},
						{
							"id": 126,
							"name": "headers",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Headers"
							},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RequestOptions.ts",
									"line": 4,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								127,
								126
							]
						}
					],
					"sources": [
						{
							"fileName": "src/core/providers/rest/RequestOptions.ts",
							"line": 2,
							"character": 39
						}
					]
				},
				{
					"id": 128,
					"name": "RESTProvider",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Represents a RESTProvider. Bound to Client context"
					},
					"sources": [
						{
							"fileName": "src/core/providers/rest/RESTProvider.ts",
							"line": 4,
							"character": 17
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 129,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/providers/rest/RESTProvider.ts",
									"line": 4,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 130,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 97,
												"name": "RequestBuilder"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 97,
														"name": "RequestBuilder"
													}
												],
												"name": "Promise"
											}
										]
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						42,
						131,
						78
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						64,
						68,
						135,
						97,
						125
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						128
					]
				}
			],
			"sources": [
				{
					"fileName": "src/core/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 32,
			"name": "main",
			"kind": 1,
			"kindString": "Module",
			"flags": {}
		},
		{
			"id": 33,
			"name": "rest",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 154,
					"name": "RESTRequestBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Create requests to Discord",
						"tags": [
							{
								"tag": "internal",
								"text": "\n"
							}
						]
					},
					"children": [
						{
							"id": 155,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 156,
									"name": "new RESTRequestBuilder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 157,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "token to be used by this request"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 158,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "request options\n"
											},
											"type": {
												"type": "reference",
												"id": 140,
												"name": "default"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 154,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 163,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Tokens used by this request"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"id": 140,
								"name": "default"
							}
						},
						{
							"id": 160,
							"name": "queryStack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Query to be built"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 14,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Record"
							},
							"defaultValue": "..."
						},
						{
							"id": 161,
							"name": "retries",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "Retries done"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 16,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "0"
						},
						{
							"id": 159,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"comment": {
								"shortText": "URI parts"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 12,
									"character": 15
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 162,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Token of this request"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 19,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 178,
							"name": "endpoint",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "URI request will be sent to"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 64,
									"character": 14
								}
							],
							"getSignature": [
								{
									"id": 179,
									"name": "endpoint",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "URI request will be sent to"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 201,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 150,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 202,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create DELETE request"
									},
									"typeParameter": [
										{
											"id": 203,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 204,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									},
									"implementationOf": {
										"type": "reference",
										"id": 114,
										"name": "RequestBuilder.delete"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 113,
								"name": "RequestBuilder.delete"
							}
						},
						{
							"id": 185,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 118,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create GET request"
									},
									"typeParameter": [
										{
											"id": 187,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 188,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"id": 125,
														"name": "default"
													},
													{
														"type": "literal",
														"value": "body"
													}
												],
												"name": "Omit"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									},
									"implementationOf": {
										"type": "reference",
										"id": 106,
										"name": "RequestBuilder.get"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 105,
								"name": "RequestBuilder.get"
							}
						},
						{
							"id": 164,
							"name": "getHeaders",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 35,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 165,
									"name": "getHeaders",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get headers"
									},
									"parameters": [
										{
											"id": 166,
											"name": "headers",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 167,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 169,
													"name": "Authorization",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												},
												{
													"id": 170,
													"name": "Content-Type",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "'application/json'"
												},
												{
													"id": 168,
													"name": "User-Agent",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "..."
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														169,
														170,
														168
													]
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 193,
							"name": "patch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 134,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 194,
									"name": "patch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create PATCH request"
									},
									"typeParameter": [
										{
											"id": 195,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 196,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									},
									"implementationOf": {
										"type": "reference",
										"id": 122,
										"name": "RequestBuilder.patch"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 121,
								"name": "RequestBuilder.patch"
							}
						},
						{
							"id": 189,
							"name": "post",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 126,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 190,
									"name": "post",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create POST request"
									},
									"typeParameter": [
										{
											"id": 191,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 192,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									},
									"implementationOf": {
										"type": "reference",
										"id": 110,
										"name": "RequestBuilder.post"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 109,
								"name": "RequestBuilder.post"
							}
						},
						{
							"id": 197,
							"name": "put",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 142,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 198,
									"name": "put",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create PUT request"
									},
									"typeParameter": [
										{
											"id": 199,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 200,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									},
									"implementationOf": {
										"type": "reference",
										"id": 118,
										"name": "RequestBuilder.put"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 117,
								"name": "RequestBuilder.put"
							}
						},
						{
							"id": 171,
							"name": "query",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 49,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 172,
									"name": "query",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add query data"
									},
									"parameters": [
										{
											"id": 173,
											"name": "k",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "key"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 174,
											"name": "v",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "value\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 97,
										"name": "default"
									},
									"implementationOf": {
										"type": "reference",
										"id": 102,
										"name": "RequestBuilder.query"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 101,
								"name": "RequestBuilder.query"
							}
						},
						{
							"id": 180,
							"name": "request",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 77,
									"character": 9
								}
							],
							"signatures": [
								{
									"id": 181,
									"name": "request",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Create a request"
									},
									"typeParameter": [
										{
											"id": 182,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 183,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "method to be used"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "GET"
													},
													{
														"type": "literal",
														"value": "POST"
													},
													{
														"type": "literal",
														"value": "PUT"
													},
													{
														"type": "literal",
														"value": "PATCH"
													},
													{
														"type": "literal",
														"value": "DELETE"
													}
												]
											}
										},
										{
											"id": 184,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "options\n"
											},
											"type": {
												"type": "reference",
												"id": 125,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 135,
												"typeArguments": [
													{
														"type": "reference",
														"name": "T"
													}
												],
												"name": "default"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 175,
							"name": "url",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RESTRequestBuilder.ts",
									"line": 58,
									"character": 5
								}
							],
							"signatures": [
								{
									"id": 176,
									"name": "url",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Add part(s) to the URI"
									},
									"parameters": [
										{
											"id": 177,
											"name": "paths",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "paths\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 97,
										"name": "default"
									},
									"implementationOf": {
										"type": "reference",
										"id": 99,
										"name": "RequestBuilder.url"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"id": 98,
								"name": "RequestBuilder.url"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								155
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								163,
								160,
								161,
								159,
								162
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								178
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								201,
								185,
								164,
								193,
								189,
								197,
								171,
								180,
								175
							]
						}
					],
					"sources": [
						{
							"fileName": "src/rest/RESTRequestBuilder.ts",
							"line": 10,
							"character": 39
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"id": 97,
							"name": "RequestBuilder"
						}
					]
				},
				{
					"id": 144,
					"name": "RestProviderBuilder",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Builds a RestProvider for {@link Client}"
					},
					"children": [
						{
							"id": 145,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 146,
									"name": "new RestProviderBuilder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 147,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "builder's options\n"
											},
											"type": {
												"type": "reference",
												"id": 140,
												"name": "default"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"id": 144,
										"name": "default"
									}
								}
							]
						},
						{
							"id": 148,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Options for this builder"
							},
							"sources": [
								{
									"fileName": "src/rest/RestProviderBuilder.ts",
									"line": 9,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 140,
								"name": "default"
							}
						},
						{
							"id": 149,
							"name": "getRestProvider",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/rest/RestProviderBuilder.ts",
									"line": 25,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "getRestProvider",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get rest provider"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 151,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 152,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 153,
															"name": "client",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 42,
																"name": "default"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 128,
														"name": "RESTProvider"
													}
												}
											]
										}
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								145
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								148
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								149
							]
						}
					],
					"sources": [
						{
							"fileName": "src/rest/RestProviderBuilder.ts",
							"line": 7,
							"character": 40
						}
					]
				},
				{
					"id": 140,
					"name": "RESTOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Options for rest"
					},
					"children": [
						{
							"id": 143,
							"name": "maxRetries",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Times, REST will try to perform the request with 5xx error code"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTOptions.ts",
									"line": 11,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 142,
							"name": "useragent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "UserAgent to use\nShouldn't be used, since Discord requires it to contain library name and it's version"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTOptions.ts",
									"line": 9,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 141,
							"name": "v",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "API version to use"
							},
							"sources": [
								{
									"fileName": "src/rest/RESTOptions.ts",
									"line": 4,
									"character": 3
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": 6
									},
									{
										"type": "literal",
										"value": 8
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								143,
								142,
								141
							]
						}
					],
					"sources": [
						{
							"fileName": "src/rest/RESTOptions.ts",
							"line": 2,
							"character": 36
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						154,
						144
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						140
					]
				}
			],
			"sources": [
				{
					"fileName": "src/rest/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 34,
			"name": "util",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 35,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 36,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 37,
									"name": "idToDate",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 39,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Convert snowflake to date"
													},
													"parameters": [
														{
															"id": 40,
															"name": "id",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Date"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										37
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						35
					]
				}
			],
			"sources": [
				{
					"fileName": "src/util/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 41,
			"name": "ws",
			"kind": 1,
			"kindString": "Module",
			"flags": {}
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				1,
				2,
				31,
				32,
				33,
				34,
				41
			]
		}
	]
}